// Code generated by "stringer -type=OptNum -linecomment -output stringers.go"; DO NOT EDIT.

package dhcp

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[OptWordAligned-0]
	_ = x[OptSubnetMask-1]
	_ = x[OptTimeOffset-2]
	_ = x[OptRouter-3]
	_ = x[OptTimeServers-4]
	_ = x[OptNameServers-5]
	_ = x[OptDNSServers-6]
	_ = x[OptLogServers-7]
	_ = x[OptCookieServers-8]
	_ = x[OptLPRServers-9]
	_ = x[OptImpressServers-10]
	_ = x[OptRLPServers-11]
	_ = x[OptHostName-12]
	_ = x[OptBootFileSize-13]
	_ = x[OptMeritDumpFile-14]
	_ = x[OptDomainName-15]
	_ = x[OptSwapServer-16]
	_ = x[OptRootPath-17]
	_ = x[OptExtensionFile-18]
	_ = x[OptIPLayerForwarding-19]
	_ = x[OptSrcrouteenabler-20]
	_ = x[OptPolicyFilter-21]
	_ = x[OptMaximumDGReassemblySize-22]
	_ = x[OptDefaultIPTTL-23]
	_ = x[OptPathMTUAgingTimeout-24]
	_ = x[OptMTUPlateau-25]
	_ = x[OptInterfaceMTUSize-26]
	_ = x[OptAllSubnetsAreLocal-27]
	_ = x[OptBroadcastAddress-28]
	_ = x[OptPerformMaskDiscovery-29]
	_ = x[OptProvideMasktoOthers-30]
	_ = x[OptPerformRouterDiscovery-31]
	_ = x[OptRouterSolicitationAddress-32]
	_ = x[OptStaticRoutingTable-33]
	_ = x[OptTrailerEncapsulation-34]
	_ = x[OptARPCacheTimeout-35]
	_ = x[OptEthernetEncapsulation-36]
	_ = x[OptDefaultTCPTimetoLive-37]
	_ = x[OptTCPKeepaliveInterval-38]
	_ = x[OptTCPKeepaliveGarbage-39]
	_ = x[OptNISDomainName-40]
	_ = x[OptNISServerAddresses-41]
	_ = x[OptNTPServersAddresses-42]
	_ = x[OptVendorSpecificInformation-43]
	_ = x[OptNetBIOSNameServer-44]
	_ = x[OptNetBIOSDatagramDistribution-45]
	_ = x[OptNetBIOSNodeType-46]
	_ = x[OptNetBIOSScope-47]
	_ = x[OptXWindowFontServer-48]
	_ = x[OptXWindowDisplayManager-49]
	_ = x[OptRequestedIPaddress-50]
	_ = x[OptIPAddressLeaseTime-51]
	_ = x[OptOptionOverload-52]
	_ = x[OptMessageType-53]
	_ = x[OptServerIdentification-54]
	_ = x[OptParameterRequestList-55]
	_ = x[OptMessage-56]
	_ = x[OptMaximumMessageSize-57]
	_ = x[OptRenewTimeValue-58]
	_ = x[OptRebindingTimeValue-59]
	_ = x[OptClientIdentifier-60]
	_ = x[OptClientIdentifier1-61]
}

const _OptNum_name = "OptWordAlignedOptSubnetMaskTime offset in seconds from UTCN/4 router addressesN/4 time server addressesN/4 IEN-116 server addressesN/4 DNS server addressesN/4 logging server addressesN/4 quote server addressesN/4 printer server addressesN/4 impress server addressesN/4 RLP server addressesHostname stringSize of boot file in 512 byte chunksClient to dump and name of file to dump toThe DNS domain name of the clientSwap server addressesPath name for root diskPatch name for more BOOTP infoEnable or disable IP forwardingEnable or disable source routingRouting policy filtersMaximum datagram reassembly sizeDefault IP time-to-livePath MTU aging timeoutPath MTU plateau tableInterface MTU sizeAll subnets are localBroadcast addressPerform mask discoveryProvide mask to othersPerform router discoveryRouter solicitation addressStatic routing tableTrailer encapsulationARP cache timeoutEthernet encapsulationDefault TCP time to liveTCP keepalive intervalTCP keepalive garbageNIS domain nameNIS server addressesNTP servers addressesVendor specific informationNetBIOS name serverNetBIOS datagram distributionNetBIOS node typeNetBIOS scopeX window font serverX window display managerRequested IP addressIP address lease timeOverload “sname” or “file”DHCP message type.DHCP server identificationParameter request listDHCP error messageDHCP maximum message sizeDHCP renewal (T1) timeDHCP rebinding (T2) timeClient identifierClient identifier"

var _OptNum_index = [...]uint16{0, 14, 27, 58, 78, 103, 131, 155, 183, 209, 237, 265, 289, 304, 340, 382, 415, 436, 459, 489, 520, 552, 574, 606, 629, 651, 673, 691, 712, 729, 751, 773, 797, 824, 844, 865, 882, 904, 928, 950, 971, 986, 1006, 1027, 1054, 1073, 1102, 1119, 1132, 1152, 1176, 1196, 1217, 1251, 1269, 1295, 1317, 1335, 1360, 1382, 1406, 1423, 1440}

func (i OptNum) String() string {
	if i >= OptNum(len(_OptNum_index)-1) {
		return "OptNum(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _OptNum_name[_OptNum_index[i]:_OptNum_index[i+1]]
}
