// Code generated by "stringer -type=Type,Class,RCode,OpCode -linecomment -output stringers.go ."; DO NOT EDIT.

package dns

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TypeA-1]
	_ = x[TypeNS-2]
	_ = x[TypeCNAME-5]
	_ = x[TypeSOA-6]
	_ = x[TypePTR-12]
	_ = x[TypeMX-15]
	_ = x[TypeTXT-16]
	_ = x[TypeAAAA-28]
	_ = x[TypeSRV-33]
	_ = x[TypeOPT-41]
	_ = x[TypeHTTPS-65]
	_ = x[TypeWKS-11]
	_ = x[TypeHINFO-13]
	_ = x[TypeMINFO-14]
	_ = x[TypeAXFR-252]
	_ = x[TypeALL-255]
}

const (
	_Type_name_0 = "ANS"
	_Type_name_1 = "CNAMESOA"
	_Type_name_2 = "WKSPTRHINFOMINFOMXTXT"
	_Type_name_3 = "AAAA"
	_Type_name_4 = "SRV"
	_Type_name_5 = "OPT"
	_Type_name_6 = "HTTPS SSE"
	_Type_name_7 = "AXFR"
	_Type_name_8 = "ALL"
)

var (
	_Type_index_0 = [...]uint8{0, 1, 3}
	_Type_index_1 = [...]uint8{0, 5, 8}
	_Type_index_2 = [...]uint8{0, 3, 6, 11, 16, 18, 21}
)

func (i Type) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _Type_name_0[_Type_index_0[i]:_Type_index_0[i+1]]
	case 5 <= i && i <= 6:
		i -= 5
		return _Type_name_1[_Type_index_1[i]:_Type_index_1[i+1]]
	case 11 <= i && i <= 16:
		i -= 11
		return _Type_name_2[_Type_index_2[i]:_Type_index_2[i+1]]
	case i == 28:
		return _Type_name_3
	case i == 33:
		return _Type_name_4
	case i == 41:
		return _Type_name_5
	case i == 65:
		return _Type_name_6
	case i == 252:
		return _Type_name_7
	case i == 255:
		return _Type_name_8
	default:
		return "Type(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ClassINET-1]
	_ = x[ClassCSNET-2]
	_ = x[ClassCHAOS-3]
	_ = x[ClassHESIOD-4]
	_ = x[ClassANY-255]
}

const (
	_Class_name_0 = "INETCSNETCHAOSHESIOD"
	_Class_name_1 = "ANY"
)

var (
	_Class_index_0 = [...]uint8{0, 4, 9, 14, 20}
)

func (i Class) String() string {
	switch {
	case 1 <= i && i <= 4:
		i -= 1
		return _Class_name_0[_Class_index_0[i]:_Class_index_0[i+1]]
	case i == 255:
		return _Class_name_1
	default:
		return "Class(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[RCodeSuccess-0]
	_ = x[RCodeFormatError-1]
	_ = x[RCodeServerFailure-2]
	_ = x[RCodeNameError-3]
	_ = x[RCodeNotImplemented-4]
	_ = x[RCodeRefused-5]
}

const _RCode_name = "successformat errorserver failurename errornot implementedrefused"

var _RCode_index = [...]uint8{0, 7, 19, 33, 43, 58, 65}

func (i RCode) String() string {
	if i >= RCode(len(_RCode_index)-1) {
		return "RCode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _RCode_name[_RCode_index[i]:_RCode_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[OpCodeQuery-0]
	_ = x[OpCodeInverseQuery-1]
	_ = x[OpCodeStatus-2]
}

const _OpCode_name = "Standard queryInverse queryServer status request"

var _OpCode_index = [...]uint8{0, 14, 27, 48}

func (i OpCode) String() string {
	if i >= OpCode(len(_OpCode_index)-1) {
		return "OpCode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _OpCode_name[_OpCode_index[i]:_OpCode_index[i+1]]
}
